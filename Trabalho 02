#include <stdio.h>
#include <stdlib.h>

#define MAXTAM 10

void Inicia_Pilha(int *Topo){
  *Topo = -1;
}

int Pilha_Vazia(int *Topo) {
  if (*Topo == -1){}
  return 0;
}


int Pilha_Cheia(int *Topo) {
  if (*Topo == MAXTAM -1){}
  return 0; 
}

int Inserir (float P[], int *Topo, float Valor){
  if(Pilha_Cheia(Topo)){
    printf("========== ERRO! Pilha Cheia! ==========");
    return -1;
  }
  else {
    (*Topo)++;
    P[*Topo] = Valor;
  }
  return 1;
}

int Retirar (float P[], int *Topo, float Valor){
  if(Pilha_Vazia(Topo)){
    printf("========== ERRO! Pilha Vazia! ==========");
    return -1;
  }
  else{
    (*Topo)--;
    Valor = P[*Topo];
  }
  return 1;
}

void Exibir_Pilha(float P[], int *Topo){
  int i;
  printf("\n\nExibir Elementos Preenchidos do Vetor\n");
  for(i=0; i<=*Topo; i++){
    printf("\nElemento [%d]: %f", i+1, P[i]);
  }
  printf("\n\n");
}

typedef struct no {
  int valor;
  struct no *direita, *esquerda;
}NoArv;

NoArv* inserir_versao_1(NoArv *raiz, int num){
  if(raiz == NULL){
    NoArv *aux = malloc(sizeof(NoArv));
    aux->valor = num;
    aux->esquerda = NULL;
    aux->direita = NULL;
    return aux;
  }
  else{
    if(num < raiz->valor)
      raiz->esquerda = inserir_versao_1(raiz->esquerda, num);
    else
      raiz->direita = inserir_versao_1(raiz->direita, num);
    return raiz;
  }
}

void imprimir_versao_2(NoArv *raiz){
  if(raiz){
    imprimir_versao_2(raiz->esquerda);
    printf("%d ", raiz->valor);
    imprimir_versao_2(raiz->direita);
  }
}



int main(){
  printf("\nEscolha sua Estrutura:\n\n1 - Árvore\n2 - Pilha\n\nOpção:");
  int escolha = 1;
  scanf("%d", &escolha);

  if( escolha == 2){
    float P[MAXTAM];
    int Topo;
    int ok, op = -1;
    int dado;
    Inicia_Pilha(&Topo);
    while (op != 0){
      printf("\n\nO que você deseja? (Digite algum dos Números Abaixo)\n\n");
      printf("\n\n1 -> Inserir\n2 -> Excluir\n3 -> Exibir Pilha\n0 -> FIM");
      printf("\n\nQual Opção?: \n");
      scanf("%d", &op);
      if (op == 1){
        printf("\nDigite um número: ");
        scanf("%d", &dado);
        Inserir(P, &Topo, dado);
      }
      else if (op == 2){
        ok = Retirar(P, &Topo, dado);
        if (ok != -1)
          printf("\nElemento Removido: %d", dado);
      }
      else if (op == 3){
        Exibir_Pilha(P, &Topo);
      }
    }
  }
  else if(escolha == 1){
     NoArv *raiz = NULL;
  
    int opcao, valor;
  
    do{
      printf("\n0 - Sair\n1 - Inserir\n2 - Imprimir\n\nOpção: ");
      scanf("%d", &opcao);
  
      switch(opcao){
        case 1:
          printf("\nDigite um Valor: ");
          scanf("%d", &valor);
          raiz = inserir_versao_1(raiz, valor);
          break;
        case 2:
          printf("\n Árvore:\n");
          imprimir_versao_2(raiz);
          break;
        default:
          if(opcao != 0)
            printf("\n\n OPCÃO INVALIDA!\n\n");
      }
    }while(opcao != 0);
  }
  else{
    printf("\n\nVALOR INCORRETO!");
  }
  return 0;
}
